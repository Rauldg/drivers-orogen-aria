name "aria"
# Optionally declare the version number
# version "0.1"

import_types_from "base"
import_types_from "AriaTypes.hpp"
using_library "aria"

task_context "Task" do
   # A configuration property (here, a std::string). Its value can be retrieved
   # in the C++ code with # _config_value.get() and _config_value.set(new_value).
   
   needs_configuration

   property("serial_port", "std/string", "/dev/ttyS0").
    doc("Path to Serial-Port of Controller (default: COM0)")
   property("poweron_boot", "std/string").
    doc("Comma or Space separated List of Ports that are powered on at boot")
   property("wheels", "int", 4).
    doc("Number of Wheels (default: 4)")

   # An input port, i.e. an object from which the component gets data from
   # other components' outputs
   #
   # Data can be retrieved using _input.read(value), which returns true if data
   # was available, and false otherwise. _input.connected() returns if this
   # input is connected to an output or not.
   input_port "transrot_vel", "base/MotionCommand2D"
   input_port "leftright_vel", "aria/commands/Velocity2"
   
   # Atomic Actions
   input_port "aa_transl_vel", "double"
   input_port "aa_rot_vel", "double"

   # output ports
   output_port "robot_status", "aria/RobotStatus"

   output_port "robot_pose", "base/samples/RigidBodyState"
   output_port "robot_pose_raw", "base/samples/RigidBodyState"
   output_port "robot_motion", "aria/samples/Velocity"
   output_port "robot_motion2", "aria/samples/Velocity2"
   output_port "robot_compass", "aria/samples/CompassHeading"
   output_port "robot_battery", "aria/samples/BatteryLevel"
   output_port "robot_temp", "aria/samples/Temperature"
   output_port "robot_odometer", "aria/samples/Odometer"
   output_port "robot_encoder", "aria/samples/Encoder"
   output_port "robot_bumpers", "aria/samples/Bumpers"
   
   output_port "motor_states", "base/actuators/Status"

   # If you want that component's updateHook() to be executed when the "input"
   # port gets data, uncomment this
   # port_driven "transrot_vel"
   
   ## Operations:
   # Reset Odometer
   operation('resetOdometer')
   	
   # Turn on/off Port 'portNr' of the PDB
   operation('controlPDB').
   	argument('portNr', 'int').
   	argument('onoff', 'bool')

    operation('motorsOn').
        doc("give power to the motors")
    operation('motorsOff').
        doc("switch motors off")
   	
   # Send direct Command
   operation('directCommand').
   	argument('MRcmd2byte', '/aria/commands/DirectCommand2Byte')
   	
   # Set translational and rotational Velocity
   operation('transrotVel').
   	argument('velocities', '/base/MotionCommand2D')
   operation('transrotVel2').
   	argument('translational', 'double'). # in m/s
   	argument('rotational', 'double') #in rad/s
   	
   # Set Velocity for left and right Wheels
   operation('lrVel').
   	argument('left', 'double').
   	argument('right', 'double')
end


